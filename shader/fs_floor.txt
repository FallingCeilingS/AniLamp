#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light1;
uniform Light light2;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
  
uniform Material material;

void main() {
    // ambient
    vec3 ambient = (light1.ambient + light2.ambient) * material.ambient * texture(first_texture, aTexCoord).rgb;
    // vec3 ambient = light1.ambient * material.ambient;

    // diffuse
    vec3 norm = normalize(aNormal);
    vec3 lightDir1 = normalize(light1.position - aPos);
    vec3 lightDir2 = normalize(light2.position - aPos);
    float diff1 = max(dot(norm, lightDir1), 0.0);
    float diff2 = max(dot(norm, lightDir2), 0.0);
    vec3 diffuse1 = light1.diffuse * (diff1 * material.diffuse) * texture(first_texture, aTexCoord).rgb;
    vec3 diffuse2 = light2.diffuse * (diff2 * material.diffuse) * texture(first_texture, aTexCoord).rgb;
    vec3 diffuse = diffuse1 + diffuse2;
    // vec3 diffuse = light1.diffuse * (diff * material.diffuse);

    // specular
    vec3 viewDir = normalize(viewPos - aPos);
    vec3 reflectDir1 = reflect(-lightDir1, norm);
    vec3 reflectDir2 = reflect(-lightDir2, norm);
    float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), material.shininess);
    float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);
    vec3 specular1 = light1.specular * (spec1 * material.specular);
    vec3 specular2 = light2.specular * (spec2 * material.specular);
    vec3 specular = specular1 + specular2;

    vec3 result = ambient + diffuse + specular;
    // vec3 result = ambient;
    fragColor = vec4(result, 1.0);
    // fragColor = vec4(0.5, 1.0, 1.0, 1.0);
}